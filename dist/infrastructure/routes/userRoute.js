"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userAuth_1 = require("../middleware/userAuth");
const controllers_1 = require("../utils/controllers");
const multer_1 = require("../config/multer");
const userRouter = express_1.default.Router();
userRouter.post('/register', (req, res) => controllers_1.uController.userRegister(req, res));
userRouter.post('/auth/google', (req, res) => controllers_1.uController.userSocialSignUp(req, res));
userRouter.post('/validateOtp', (req, res) => controllers_1.uController.validateUserOTP(req, res));
userRouter.get('/resendOtp', (req, res) => controllers_1.uController.resendOTP(req, res));
userRouter.post('/login', (req, res) => controllers_1.uController.userLogin(req, res));
userRouter.put('/update/:userId', userAuth_1.userAuth, (req, res) => controllers_1.uController.updateProfile(req, res));
userRouter.patch('/update/profileimage/:userId', userAuth_1.userAuth, multer_1.upload.single('image'), (req, res) => controllers_1.uController.updateUserProfileDp(req, res));
userRouter.patch('/remove/profileimage/:userId', userAuth_1.userAuth, (req, res) => controllers_1.uController.removeUserProfileDp(req, res));
userRouter.get('/get/:userId', userAuth_1.userAuth, (req, res) => controllers_1.uController.getUserData(req, res));
userRouter.get('/theaters', (req, res) => controllers_1.tController.loadTheaters(req, res));
userRouter.get('/theater/:theaterId', (req, res) => controllers_1.tController.getTheaterData(req, res));
userRouter.get('/movies', (req, res) => controllers_1.mController.getMovies(req, res));
userRouter.get('/movies/get/:movieId', (req, res) => controllers_1.mController.getMovieDetails(req, res));
userRouter.get('/filters', (req, res) => controllers_1.mController.getFilters(req, res));
userRouter.get('/chat/theaters/:userId', userAuth_1.userAuth, (req, res) => controllers_1.chatController.getTheatersChattedWith(req, res));
userRouter.get('/chat/history', userAuth_1.userAuth, (req, res) => controllers_1.chatController.getChatHistory(req, res));
userRouter.get('/banner', (req, res) => controllers_1.mController.getBannerMovies(req, res));
userRouter.get('/theater/show/get/:showId', userAuth_1.userAuth, (req, res) => controllers_1.showController.getShowDetails(req, res));
userRouter.get('/show/seats/holded/:showId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.getHoldedSeats(req, res));
userRouter.post('/book/ticket', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.bookTicket(req, res));
userRouter.get('/tempticket/get/:ticketId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.getTempTicketData(req, res));
userRouter.post('/show/book/confirm/ticket', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.confirmTicket(req, res));
userRouter.get('/show/ticket/get/:ticketId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.getTicketData(req, res));
userRouter.get('/shows/:theaterId', (req, res) => controllers_1.showController.findShowsOnTheaterByUser(req, res));
userRouter.get('/shows/seats/:showSeatId', (req, res) => controllers_1.showSeatsController.findShowSeatById(req, res));
userRouter.get('/tickets/:userId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.getTicketsOfUser(req, res));
userRouter.patch('/ticket/cancel/:ticketId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.cancelTicket(req, res));
userRouter.post('/tickets/invoice/mail', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.sendInvoiceMail(req, res));
userRouter.patch('/wallet/add/:userId', userAuth_1.userAuth, (req, res) => controllers_1.uController.addToWallet(req, res));
userRouter.get('/wallet-history/:userId', userAuth_1.userAuth, (req, res) => controllers_1.uController.getWalletHistory(req, res));
userRouter.get('/coupons/applicable-coupons/:userId', userAuth_1.userAuth, (req, res) => controllers_1.couponController.getApplicableCoupons(req, res));
exports.default = userRouter;
